#include <Arduino.h>
#define size 8
#define DELAY 300


short led_pins[] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, A0, A1, A2, A3};

short rows[] = {8, 9, 10, 11, A0, A1, A2, A3};//{10, 7, 6, A2, 4, A1, 12, 13};
short columns[] = {0, 1, 2, 3, 4, 5, 6, 7};//{5, 8, 3, 9, A0, 2, 11, A3};
byte state = 0;

typedef byte screen_matrix[size];

short count = 0;

byte anim_length = 16; // animation: 31, heart_anim: 16

const screen_matrix heart PROGMEM = {0x99, 0x00, 0x00, 0x00, 0x81, 0xC3, 0xE7, 0xFF};
const screen_matrix random_cucc PROGMEM = {0x21, 0x71, 0xA8, 0xD5, 0x82, 0x43, 0x82, 0x76};
const screen_matrix animation[] PROGMEM = {
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, // demó effekt
    {0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe},
    {0xbf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd},
    {0xdf, 0xbf, 0x7f, 0xff, 0xff, 0xfe, 0xfd, 0xfb},
    {0x6f, 0xdf, 0xbf, 0x7f, 0xfe, 0xfd, 0xfb, 0xf6},
    {0xb7, 0x6f, 0xdf, 0xbe, 0x7d, 0xfb, 0xf6, 0xed},
    {0xdb, 0xb7, 0x6e, 0xdd, 0xbb, 0x76, 0xed, 0xdb},
    {0xed, 0xda, 0xb5, 0x6b, 0xd6, 0xad, 0x5b, 0xb7},
    {0xf6, 0xed, 0xdb, 0xb6, 0x6d, 0xdb, 0xb7, 0x6f},
    {0xf9, 0xf2, 0xe4, 0xc9, 0x93, 0x27, 0x4f, 0x9f}, 
    {0xf6, 0xed, 0xdb, 0xb6, 0x6d, 0xdb, 0xb7, 0x6f},
    {0xed, 0xda, 0xb5, 0x6b, 0xd6, 0xad, 0x5b, 0xb7},
    {0xdb, 0xb7, 0x6e, 0xdd, 0xbb, 0x76, 0xed, 0xdb},
    {0xb7, 0x6f, 0xdf, 0xbe, 0x7d, 0xfb, 0xf6, 0xed},
    {0x6f, 0xdf, 0xbf, 0x7f, 0xfe, 0xfd, 0xfb, 0xf6},
    {0xdf, 0xbf, 0x7f, 0xff, 0xff, 0xfe, 0xfd, 0xfb},
    {0xbf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd},
    {0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe},
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    {0xff, 0xff, 0xff, 0xe7, 0xe7, 0xff, 0xff, 0xff}, // innen jön a kör
    {0xff, 0xff, 0xe7, 0xdb, 0xdb, 0xe7, 0xff, 0xff},
    {0xff, 0xe7, 0xdb, 0xbd, 0xbd, 0xdb, 0xe7, 0xff},
    {0xf7, 0xfd, 0x7f, 0xbe, 0xfe, 0xbf, 0xfb, 0xef},
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
    {0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, // innen a pluszjel
    {0xfd, 0xf8, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff},
    {0xfb, 0xf1, 0xfb, 0xff, 0xff, 0xbf, 0xff, 0xff},
    {0xf7, 0xe3, 0xf7, 0xff, 0xbf, 0x1f, 0xbf, 0xff},
    {0xef, 0xc7, 0xef, 0xff, 0xdf, 0x8f, 0xdf, 0xff},
    {0xff, 0xef, 0xff, 0xff, 0xef, 0xc7, 0xef, 0xff},
    {0xff, 0xff, 0xff, 0xff, 0xf7, 0xe3, 0xf7, 0xff},
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff},
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
};

const screen_matrix heart_anim[] PROGMEM = {
    {0xff, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff},
    {0x7f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff},
    {0x3f, 0x1f, 0x1f, 0x1f, 0x3f, 0x7f, 0xff, 0xff},
    {0x9f, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x7f, 0xff},
    {0xcf, 0x07, 0x07, 0x07, 0x0f, 0x1f, 0x3f, 0xff},
    {0x67, 0x03, 0x03, 0x03, 0x07, 0x0f, 0x9f, 0xff},
    {0x33, 0x01, 0x01, 0x01, 0x03, 0x87, 0xcf, 0xff},
    {0x99, 0x00, 0x00, 0x00, 0x81, 0xc3, 0xe7, 0xff},
    {0xcc, 0x80, 0x80, 0x80, 0xc0, 0xe1, 0xf3, 0xff},
    {0xe6, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xf9, 0xff},
    {0xf3, 0xe0, 0xe0, 0xe0, 0xf0, 0xf8, 0xfc, 0xff},
    {0xf9, 0xf0, 0xf0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff},
    {0xfc, 0xf8, 0xf8, 0xf8, 0xfc, 0xfe, 0xff, 0xff},
    {0xfe, 0xfc, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff},
    {0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff},
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
};

const screen_matrix *picture;


void refresh_screen() {
    for (byte row = 0; row < size; row++) {
        digitalWrite(rows[row], HIGH);
        byte current_row = pgm_read_byte_near(*picture + row);
        // Itt jó lenne egy portra írás, de összevissza vannak a lábak...
        PORTD = current_row;
       /*
       for (byte column = 0; column < size; column++) {
            // digitalWrite(columns[column], (*picture)[row]>>column)&0x01);
            digitalWrite(columns[column], (current_row >> column)&0x01);
            digitalWrite(columns[column], HIGH);
        }
        */
        delay(DELAY);
        PORTD = 0xFF;
        digitalWrite(rows[row], LOW);
    }
}


void setup() {
    for (byte i = 0; i < size; i++) {
        pinMode(rows[i], OUTPUT);
        digitalWrite(rows[i], LOW);
        pinMode(columns[i], OUTPUT);
        digitalWrite(columns[i], HIGH);
    }
    picture = &heart_anim[0];
    DDRD = 0xFF;
}

void loop() {
    refresh_screen();
    count++;
    if (count == 1500 - 5 * DELAY + 1) {
        count = 0;
        state++;
        if (state == anim_length){
            state = 0;
        }
        picture = &heart_anim[state];
    }
}
